From 00752c0c18e24f3410f94a7a6dd523bb9a276066 Mon Sep 17 00:00:00 2001
From: Nivedita Sarkar <nsarkar@codeaurora.org>
Date: Thu, 18 Apr 2019 12:52:42 -0700
Subject: [PATCH 1/2] Bluetooth: Support to know if there is High Def call

Support to know if there a High def call

[wight554: update from LA.QSSI.11.0.r1-05600-qssi.0]

Change-Id: Ieedcc0aa8b23eeabe75ad2670efcf1c371b00296
CRs-fixed: 2450295
Signed-off-by: Volodymyr Zhdanov <wight554@gmail.com>
---
 .../telecom/BluetoothPhoneServiceImpl.java    | 42 ++++++++++++++++++-
 1 file changed, 41 insertions(+), 1 deletion(-)

diff --git a/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java b/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java
index f2ea95000..53311f93f 100644
--- a/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java
+++ b/src/com/android/server/telecom/BluetoothPhoneServiceImpl.java
@@ -27,16 +27,19 @@ import android.content.IntentFilter;
 import android.net.Uri;
 import android.os.Binder;
 import android.os.IBinder;
+import android.os.Bundle;
 import android.os.RemoteException;
 import android.telecom.Connection;
 import android.telecom.Log;
 import android.telecom.PhoneAccount;
+import android.telecom.TelecomManager;
 import android.telecom.VideoProfile;
 import android.telephony.PhoneNumberUtils;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 
 import com.android.internal.annotations.VisibleForTesting;
+import com.android.internal.telephony.PhoneConstants;
 import com.android.server.telecom.CallsManager.CallsManagerListener;
 
 import java.util.Collection;
@@ -257,6 +260,43 @@ public class BluetoothPhoneServiceImpl {
             }
         }
 
+       /**
+        * isHighDefCallInProgress
+        * Returns true if there is any Call is in Progress with High Definition
+        *               quality
+        *         false otherwise.
+        */
+        @Override
+        public boolean isHighDefCallInProgress() {
+            boolean isHighDef = false;
+            Call ringingCall = mCallsManager.getRingingOrSimulatedRingingCall();
+            Call dialingCall = mCallsManager.getOutgoingCall();
+            Call activeCall = mCallsManager.getActiveCall();
+
+            /* If its an incoming call we will have codec info in dialing state */
+            if (ringingCall != null) {
+                isHighDef = ringingCall.hasProperty(Connection.PROPERTY_HIGH_DEF_AUDIO);
+            } else if (dialingCall != null) { /* CS dialing call has codec info in dialing state */
+                Bundle extras = dialingCall.getExtras();
+                if (extras != null) {
+                    int phoneType = extras.getInt(
+                        TelecomManager.EXTRA_CALL_TECHNOLOGY_TYPE);
+                    if (phoneType == PhoneConstants.PHONE_TYPE_GSM
+                        || phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
+                        isHighDef = dialingCall.hasProperty(Connection.PROPERTY_HIGH_DEF_AUDIO);
+                    /* For IMS calls codec info is not present in dialing state */
+                    } else if (phoneType == PhoneConstants.PHONE_TYPE_IMS
+                        || phoneType == PhoneConstants.PHONE_TYPE_CDMA_LTE) {
+                        isHighDef = true;
+                    }
+                }
+            } else if (activeCall != null) {
+                isHighDef = activeCall.hasProperty(Connection.PROPERTY_HIGH_DEF_AUDIO);
+            }
+            Log.i(TAG, "isHighDefCallInProgress: Call is High Def " + isHighDef);
+            return isHighDef;
+        }
+
         @Override
         public boolean processChld(int chld) throws RemoteException {
             synchronized (mLock) {
@@ -852,7 +892,7 @@ public class BluetoothPhoneServiceImpl {
         int bluetoothCallState = CALL_STATE_IDLE;
         if (ringingCall != null && !ringingCall.isSilentRingingRequested()) {
             bluetoothCallState = CALL_STATE_INCOMING;
-        } else if (dialingCall != null) {
+        } else if (dialingCall != null && dialingCall.getState() == CallState.DIALING) {
             bluetoothCallState = CALL_STATE_ALERTING;
         } else if (hasOnlyDisconnectedCalls || mIsDisconnectedTonePlaying) {
             // Keep the DISCONNECTED state until the disconnect tone's playback is done
-- 
2.28.0

